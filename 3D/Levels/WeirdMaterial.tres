[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "Scale"

[sub_resource type="VisualShaderNodeVectorOp" id=3]

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "Offset"

[sub_resource type="VisualShaderNodeVectorFunc" id=5]
function = 14

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 6.284

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=11]
default_input_values = [ 0, 0.5, 1, 0.5, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=13]

[sub_resource type="VisualShader" id=14]
code = "shader_type spatial;
uniform float Scale;
uniform float Offset;



void vertex() {
// Output:0

}

void fragment() {
// Scalar:22
	float n_out22p0;
	n_out22p0 = 6.284000;

// Input:5
	mat4 n_out5p0;
	n_out5p0 = CAMERA_MATRIX;

// Input:2
	vec3 n_out2p0;
	n_out2p0 = VERTEX;

// TransformVectorMult:6
	vec3 n_out6p0;
	n_out6p0 = ( n_out5p0 * vec4(n_out2p0, 1.0) ).xyz;

// ScalarUniform:15
	float n_out15p0;
	n_out15p0 = Scale;

// VectorOp:14
	vec3 n_out14p0;
	n_out14p0 = n_out6p0 * vec3(n_out15p0);

// VectorOp:21
	vec3 n_out21p0;
	n_out21p0 = vec3(n_out22p0) * n_out14p0;

// ScalarUniform:17
	float n_out17p0;
	n_out17p0 = Offset;

// VectorOp:16
	vec3 n_out16p0;
	n_out16p0 = n_out21p0 + vec3(n_out17p0);

// VectorFunc:18
	vec3 n_out18p0;
	n_out18p0=cos(n_out16p0);

// ScalarOp:19
	float n_in19p1 = 0.50000;
	float n_out19p0;
	n_out19p0 = dot(n_out18p0,vec3(0.333333,0.333333,0.333333)) * n_in19p1;

// ScalarOp:20
	float n_in20p1 = 0.50000;
	float n_out20p0;
	n_out20p0 = n_out19p0 + n_in20p1;

// ScalarSmoothStep:23
	float n_in23p0 = 0.50000;
	float n_in23p1 = 0.50000;
	float n_out23p0;
	n_out23p0 = smoothstep( n_in23p0, n_in23p1, n_out20p0 );

// Output:0
	ALBEDO = vec3(n_out23p0);

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 1140, -20 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -1060, 40 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( -1040, -20 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -860, -20 )
nodes/fragment/14/node = SubResource( 1 )
nodes/fragment/14/position = Vector2( -580, 0 )
nodes/fragment/15/node = SubResource( 2 )
nodes/fragment/15/position = Vector2( -800, 100 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( -160, 20 )
nodes/fragment/17/node = SubResource( 4 )
nodes/fragment/17/position = Vector2( -380, 120 )
nodes/fragment/18/node = SubResource( 5 )
nodes/fragment/18/position = Vector2( 20, 40 )
nodes/fragment/19/node = SubResource( 6 )
nodes/fragment/19/position = Vector2( 220, 40 )
nodes/fragment/20/node = SubResource( 8 )
nodes/fragment/20/position = Vector2( 400, 40 )
nodes/fragment/21/node = SubResource( 9 )
nodes/fragment/21/position = Vector2( -360, -20 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( -600, -80 )
nodes/fragment/23/node = SubResource( 11 )
nodes/fragment/23/position = Vector2( 640, 60 )
nodes/fragment/connections = PoolIntArray( 5, 0, 6, 0, 2, 0, 6, 1, 6, 0, 14, 0, 15, 0, 14, 1, 17, 0, 16, 1, 16, 0, 18, 0, 18, 0, 19, 0, 19, 0, 20, 0, 21, 0, 16, 0, 22, 0, 21, 0, 14, 0, 21, 1, 20, 0, 23, 2, 23, 0, 0, 0 )

[resource]
shader = SubResource( 14 )
shader_param/Scale = 1.0
shader_param/Offset = 0.0
